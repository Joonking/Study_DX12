1. DirectX12 초기화 =====================================================================

1.1 프로젝트 설정 ------------------------------------------------------------------------------------------------------------------

프로그램 시작시 Client.cpp 의 wWinMain 함수가 실행되면서 시작됨.

wWinMain 의 while 문이 계속 돌면서 프로그램이 실행됨. 

while 조건문에 기본적으로 있는 GetMessage 함수는 
메시지(키보드를 누른다던지 마우스를 누른다던지 해서)가 들어오지 않는 이상
계속 대기 상태임. 하지만 게임은 계속 실행해야함.

PeekMessage() 함수를 사용하면 메시지가 있는지 없는지만 살짝 엿볼 수 있음.
메시지가 없으면 계속 실행하도록


미리 컴파일된 헤더 pch.h 추가 (자주 사용될 헤더들 모아둘 용도)

Game 클래스는 실질적인 게임이 들어갈 클래스

Game 클래스의 Init() 함수 :			초기화 용도
Game 클래스의 Update() 함수 :	업데이트 용도


엔진 프로젝트를 따로 만들어서 빼두자. (정적 라이브러리로 프로젝트 생성.)
(다른 게임을 제작한다고 했을때 코드 재사용을 위해)

정적 라이브러리 : 프로젝트 자체에 딸려 합쳐져서 들어가는 개념임. 
동적 라이브러리 : 프로그램이 실행되는 순간에 외부에 있는걸 가져와 사용하는 개념

엔진 프로젝트는 그래픽과 관련된 부분을 처리할거임.

EnginePch 용도 : 클라이언트에서도 자주 활용될 헤더들을 한 곳에 묶기 위해

엔진 프로젝트의 내용을 클라이언트에서 끌어다 쓰도록 만들어줘야함.
클라이언트 프로젝트 속성 페이지
	> VC++ 디렉터리 > 포함 디렉터리 설정 (헤더가 있는 경로를 알려주기)
							> 라이브러리 디렉터리 설정 (라이브러리가 있는 경로 알려주기)

클라이언트의 pch.h 에 #include "EnginePch.h" 를 추가해서 엔진의 헤더를 추가.
								#pragma comment(lib, "Engine.lib") 를 추가하면
								컴파일 되기 이전에 전처리기가 Engine.lib 를 추가해줌.
								

1.2 장치 초기화 -------------------------------------------------------------------------------------------------------------------------

Engine 클래스
	
	엔진 객체는 EnginePch.cpp 에서 유니크 포인터로 하나 만들어줄거임.
	그래서 EnginePch 헤더를 가진 애들은 모두 엔진객체에 접근 할 수 있도록.

	Init() 함수 : 초기화 함수	- 클라이언트에서 호출 해 줄거임.
					받아야할 정보 : 출력 윈도우 핸들, 위도우의 너비와 높이, 창모드인지 전체화면인지 등의 정보

					윈도우의 정보는 EnginePch.h 에 WindowInfo 라는 구조체에 만들어줌.


	Render() 함수 : 그려줄 함수


	엔진클래스에서 밑에 클래스들을 모두 가지고 있음. 
	얘네들은 초기화 할때 필요한 애들임. 
		shared_ptr<Device>					_device;
		shared_ptr<CommandQueue>		_cmdQueue;
		shared_ptr<SwapChain>				_swapChain;
		shared_ptr<RootSignature>			_rootSignature;
	
	이 변수들은 엔진의 Init 함수에서 make_shared<클래스명>() 으로 객체를 생성해줌.
	그리고 각각의 객체의 Init 함수를 호출해줌. 


Device 클래스
	인력사무소 느낌임. 각종 객체를 생성하는 걸 담당.


	ComPtr	
		COM(Component Object Model) 을 사용할 수 있게 해주는 포인터

		D3D12CreateDevice 함수 
			그래픽 카드를 나타내는 객체를 생성 _device 에다가
			그래픽 카드에 어떠한 기능을 요청할때 _device를 통해 요청함.

		_dxgi 는 화면과 관련된 기능을 담당함.

		_dxgi와 _device는 인력사무소의 대표들이다 라고 생각하면됨.



CommandQueue 클래스

	GPU에게 외주를 줄건데 예전에는 _device를 통해 요청하면되는데
	dx12부터는 외주를 줄때 CommanQueue를 사용해서 줘야함.

	CommandQueue에다가 외주 줄것들을 모아서 주는 개념임.

	외주를 준 작업이 끝나고 작업 결과물을 받은 다음에 작업을 처리해야하는
	경우가 생길 수 있음. 그럴때 사용하는게 _fence 임. (울타리)

	울타리를 쳐서 외주 작업을 기다리는 개념.

	Init 함수는 초기화할때 사용
	WaitSync 는 울타리 쳐서 기다리는 함수



SwapChain 클래스

	교환 사슬
		[외주 과정]
			- 현재 게임 세상에 있는 상황을 묘사
			- 어떤 공식으로 어떻게 계산할지 던져줌
			- GPU가 열심히 계산 (외주)
			- 결과물 받아서 화면에 그려준다

		[외주 결과물]을 어디에 받지?
			- 어떤 종이(Buffer)에 그려서 건내달라고 부탁해보자
			- 특수 종이를 만들어서 -> 처음에 건내주고 -> 결과물을 해당 종이에 받는다 OK
			- 우리 화면에 특수 종이(외주 결과물) 출력해준다

		[?]
			- 그런데 화면에 현재 결과물 출력하는 와중에, 다음 화면도 외주를 맡겨야 함
			- 현재 화면 결과물은 이미 화면 출력에 사용중
			- 특수 종이를 2개 만들어서, 하나는 현재 화면을 그려주고, 하나는 외주 맡기고...
			- Double Buffering!
			
		[0] [1]
			현재 화면 [0]  <-> GPU 작업중 [1] BackBuffer


엔진의 Render() 함수 : RenderBegin, RenderEnd 호출 
	
	RenderBegin() : CommandQueue 에다가 요청 사항들을 넣어주는것
		_cmdQueue->RenderBegin(&_viewport, &_scissorRect);

	RenderEnd() :  쌓은 일감들을 GPU에게 외주를 맡겨서 실질적인 모든 일감을 실행.
		_cmdQueue->RenderEnd();


CommandQueue의 RenderBegin 함수
	SwapChain 에서 그려질 화면을
	[0] [1]		(그려질 화면 0, 1)
			현재 화면 [0]  <-> GPU 작업중 [1] BackBuffer
	이런식으로 번갈아가면서 화면이 그려지는데
	이 작업을 RenderBegin에서 해줌. 
	GPU에게 BackBuffer로 외주를 요청

CommandQueue의 RenderEnd 함수
	GPU에서 작업한 [1] 작업 결과물을 [0] 과 교체해주는 작업을 함.


1.3 삼각형 띄우기 -----------------------------------------------------------------------------------------------------------------------

RootSignature 클래스
	계약서, 결재 같은 개념임.
	CPU에서 GPU로 외주를 맡기는데
	어떤것을 사용하겠다 라는 서명이라는 절차를 거침.
	어떠한 버퍼, 레지스터를 사용하겠다는 것을 명시해주는거임. 


Mesh 클래스
	정점으로 이루어진 물체
	리소스와 view 를 가지고 있어야함.

	Init 함수에서 그릴 정점들을 vector 매개변수로 받아올거임.
	Vertex 자료형은 EnginePch.h에서 정의함. 
	struct Vertex
	{
		Vec3 pos;
		Vec4 color;
	};
	3차원 공간이라 Vec3은 x,y,z 좌표를 표현
	Vec4 는 색상정보를 가지게끔.

	GPU쪽 메모리에 그릴 데이터들을 복사해줘야함.
	CreateCommittedResource 함수로 GPU에 사용할 공간을 할당 받음.
	
	버퍼사이즈 만큼의 버퍼를 만들고
	어떤 용도로 사용할지를 정해주고 (D3D12_HEAP_TYPE_UPLOAD)

	_vertexBuffer는 사실상 ram에 있는게 아니고 gpu의 메모리를 가리킴.
	여기에 값을 넣을때는 두단계에 걸쳐 데이터를 넣음.

	_vertexBuffer->Map(0, &readRange, &vertexDataBuffer);	vertexDataBuffer를 통해서 잠시나마 gpu의 메모리 공간에 복사를 함.
	::memcpy(vertexDataBuffer, &vec[0], bufferSize);
	_vertexBuffer->Unmap(0, nullptr);		뚜껑을 닫아주기


Shader 클래스
	[일감 기술서] 외주 인력들이 뭘 해야할지 기술




1.4 Constant Buffer ---------------------------------------------------------------------------------------------------------------------

쉐이더 default.hlsli 가 GPU에게 보내주는 외주 일감이라고 했었음.
이번에는 VS_Main 에서 좌표값과 칼라값을 변화시켜볼거임.

RootSignature 에서 서명해서 GPU의 메모리를 사용할 수 있음.
GPU의 레지스터를 사용하려면 어떤 정책에 서명을 해줘야함.


CommandQueue의 랜더링을 시작하는 RenderBegin 부분에서
어떤 정책으로 어떤 건물을 임대하겠다 하는 서명을 해줄거임.
	_cmdList->SetGraphicsRootSignature(ROOT_SIGNATURE.Get());
	이러한 서명을 활용하겠다는 선포

RootSignature에서 생성한 서명은 ~~ 한 것들을 사용하겠다라는거임
실질적인 데이터를 넣는 작업은 Mesh의 Render 함수에서 일어남.

Mesh의 
Device를 통해서 이루어지는 애들은 CommandQueue를 이용해서
나중에 이루어지는게 아닌 지금 당장 일어나는거임. 
반면에 CMD_LIST에서 작업하는거는 예약만 하는거는 
나중에 execute를 할때 한번에 일어남.


1.5 Root Signature ---------------------------------------------------------------------------------------------------------------------

전 시간에는 RootSignature 안에 파라미터 값 CBV 값을 이용했다면

이번에는 desciptor table을 이용하는 방식으로 서명을 해볼거임.

RootSignature는 64 DWORD가 리미트임.

그래서 용량이 모자라면 테이블을 사용하면됨.

RootSignature 겍체를 이용해서 GPU의 레지스터에 테이블을 만들거임.
이 테이블에 b0,b1,b2,b3,b4 이런식으로 사용할 파라미터를 정해주는데

이때 레지스터로 어떻게 올리느냐 
SetDescriptorHeaps
SetGraphicsRootDescriptorTable 을 이용함.

1.6 Index Buffer -----------------------------------------------------------------------------------------------------------------------















2. Component ==========================================






























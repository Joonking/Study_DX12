1. DirectX12 초기화 =====================================================================

1.1 프로젝트 설정 ------------------------------------------------------------------------------------------------------------------

프로그램 시작시 Client.cpp 의 wWinMain 함수가 실행되면서 시작됨.

wWinMain 의 while 문이 계속 돌면서 프로그램이 실행됨. 

while 조건문에 기본적으로 있는 GetMessage 함수는 
메시지(키보드를 누른다던지 마우스를 누른다던지 해서)가 들어오지 않는 이상
계속 대기 상태임. 하지만 게임은 계속 실행해야함.

PeekMessage() 함수를 사용하면 메시지가 있는지 없는지만 살짝 엿볼 수 있음.
메시지가 없으면 계속 실행하도록


미리 컴파일된 헤더 pch.h 추가 (자주 사용될 헤더들 모아둘 용도)

Game 클래스는 실질적인 게임이 들어갈 클래스

Game 클래스의 Init() 함수 :			초기화 용도
Game 클래스의 Update() 함수 :	업데이트 용도


엔진 프로젝트를 따로 만들어서 빼두자. (정적 라이브러리로 프로젝트 생성.)
(다른 게임을 제작한다고 했을때 코드 재사용을 위해)

정적 라이브러리 : 프로젝트 자체에 딸려 합쳐져서 들어가는 개념임. 
동적 라이브러리 : 프로그램이 실행되는 순간에 외부에 있는걸 가져와 사용하는 개념

엔진 프로젝트는 그래픽과 관련된 부분을 처리할거임.

EnginePch 용도 : 클라이언트에서도 자주 활용될 헤더들을 한 곳에 묶기 위해

엔진 프로젝트의 내용을 클라이언트에서 끌어다 쓰도록 만들어줘야함.
클라이언트 프로젝트 속성 페이지
	> VC++ 디렉터리 > 포함 디렉터리 설정 (헤더가 있는 경로를 알려주기)
							> 라이브러리 디렉터리 설정 (라이브러리가 있는 경로 알려주기)

클라이언트의 pch.h 에 #include "EnginePch.h" 를 추가해서 엔진의 헤더를 추가.
								#pragma comment(lib, "Engine.lib") 를 추가하면
								컴파일 되기 이전에 전처리기가 Engine.lib 를 추가해줌.
								

1.2 장치 초기화 -------------------------------------------------------------------------------------------------------------------------

Engine 클래스
	
	엔진 객체는 EnginePch.cpp 에서 유니크 포인터로 하나 만들어줄거임.
	그래서 EnginePch 헤더를 가진 애들은 모두 엔진객체에 접근 할 수 있도록.

	Init() 함수 : 초기화 함수	- 클라이언트에서 호출 해 줄거임.
					받아야할 정보 : 출력 윈도우 핸들, 위도우의 너비와 높이, 창모드인지 전체화면인지 등의 정보

					윈도우의 정보는 EnginePch.h 에 WindowInfo 라는 구조체에 만들어줌.


	Render() 함수 : 그려줄 함수


	엔진클래스에서 밑에 클래스들을 모두 가지고 있음. 
	얘네들은 초기화 할때 필요한 애들임. 
		shared_ptr<Device>					_device;
		shared_ptr<CommandQueue>		_cmdQueue;
		shared_ptr<SwapChain>				_swapChain;
		shared_ptr<RootSignature>			_rootSignature;
	이 변수들은 엔진의 Init 함수에서 make_shared<클래스명>() 으로 객체를 생성해줌.
	그리고 각각의 객체의 Init 함수를 호출해줌. 


Device 클래스
	인력사무소 느낌임. 각종 객체를 생성하는 걸 담당.

	ComPtr



CommandQueue 클래스

SwapChain 클래스

RootSignature 클래스






1.3 삼각형 띄우기 -----------------------------------------------------------------------------------------------------------------------










1.4 Constant Buffer ---------------------------------------------------------------------------------------------------------------------











2. Component ==========================================





























